{"version":3,"sources":["webpack:///./src/components/PostFeed/styled.js","webpack:///./src/components/PostFeed/index.js","webpack:///./src/pages/index.js","webpack:///./src/components/Layout/styled.js","webpack:///./src/components/Layout/index.js","webpack:///./src/components/seo.js"],"names":["PostFeedWrapper","styled","section","PostLinkWrapper","a","PostItem","div","PostTitle","p","PostDescription","PostDate","time","PostFeed","list","sortedPosts","useMemo","map","node","frontmatter","date","description","title","timeToRead","slug","fields","href","rel","IndexPage","rawPostList","useStaticQuery","allMarkdownRemark","edges","Layout","LayoutWrapper","LayoutMain","main","children","Header","Profile","SEO","lang","meta","site","metaDescription","siteMetadata","defaultTitle","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps"],"mappings":"2KAEaA,EAAkBC,IAAOC,QAAV,8EAAGD,CAAH,+DAMfE,EAAkBF,IAAOG,EAAV,8EAAGH,CAAH,yCAKfI,EAAWJ,IAAOK,IAAV,uEAAGL,CAAH,sBAIRM,EAAYN,IAAOO,EAAV,wEAAGP,CAAH,0CAKTQ,EAAkBR,IAAOO,EAAV,8EAAGP,CAAH,kDAMfS,EAAWT,IAAOU,KAAV,uEAAGV,CAAH,kCCANW,EAxBE,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACZC,EAAcC,mBAAQ,kBAC1BF,EAAKG,KAAI,oBAAGC,KAAH,IAAWC,YAAeC,EAA1B,EAA0BA,KAAMC,EAAhC,EAAgCA,YAAaC,EAA7C,EAA6CA,MAASC,EAAtD,EAAsDA,WAAsBC,EAA5E,EAAkEC,OAAUD,KAA5E,OACP,kBAAC,EAAD,CACEE,KAAMF,EACNF,MAAOA,EACPK,IAAI,sBAEJ,kBAAC,EAAD,KACE,kBAAC,EAAD,KAAcL,GACd,kBAAC,EAAD,KAAgBF,EAAhB,MAA0BG,EAA1B,aACA,kBAAC,EAAD,KAAoBF,UAIzB,CAACP,IAEJ,OACE,kBAAC,EAAD,KACGC,ICeQa,UA/BG,WAAO,IAqBjBC,EApBwBC,yBAAe,cAArCC,kBAoB8BC,MAEtC,OACE,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAKX,MAAM,SACX,kBAAC,EAAD,CAAUR,KAAMe,O,2GC/BTK,EAAgBhC,IAAOC,QAAV,2EAAGD,CAAH,oJAUbiC,EAAajC,IAAOkC,KAAV,wEAAGlC,CAAH,kCCYR+B,IAfA,SAAC,GAAkB,IAAhBI,EAAe,EAAfA,SAChB,OACE,kBAAC,EAAD,KACE,kBAAC,IAAD,MACA,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,MACA,kBAAC,EAAD,KAAeF,M,kCCfrB,iDAYA,SAASG,EAAT,GAAkD,IAAD,IAAlCnB,EAAkC,EAAlCA,YAAaoB,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMpB,EAAS,EAATA,MAC9BqB,EAASb,yBAAe,YAAxBa,KAcFC,EAAkBvB,GAAesB,EAAKE,aAAaxB,YACnDyB,EAAY,UAAGH,EAAKE,oBAAR,aAAG,EAAmBvB,MAExC,OACE,kBAAC,IAAD,CACEyB,eAAgB,CACdN,QAEFnB,MAAOA,EACP0B,cAAeF,EAAY,QAAWA,EAAiB,KACvDJ,KAAM,CACJ,CACEO,KAAK,cACLC,QAASN,GAEX,CACEO,SAAS,WACTD,QAAS5B,GAEX,CACE6B,SAAS,iBACTD,QAASN,GAEX,CACEO,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,SAAS,UAAAP,EAAKE,oBAAL,eAAmBO,SAAnB,IAEX,CACEH,KAAK,gBACLC,QAAS5B,GAEX,CACE2B,KAAK,sBACLC,QAASN,IAEXS,OAAOX,KAKfF,EAAIc,aAAe,CACjBb,KAAK,KACLC,KAAM,GACNrB,YAAY,IAUCmB","file":"component---src-pages-index-js-786bcd02a8ad8a9d220e.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nexport const PostFeedWrapper = styled.section`\r\n  background-color: #fff;\r\n  display: flex;\r\n  flex-direction: column;\r\n`\r\n\r\nexport const PostLinkWrapper = styled.a`\r\n  color: #4AB2EE;\r\n  text-decoration: none;\r\n`\r\n\r\nexport const PostItem = styled.div`\r\n  margin: 1.5rem 0;\r\n`\r\n\r\nexport const PostTitle = styled.p`\r\n  font-size: 2rem;\r\n  margin-bottom: 0.3rem;\r\n`\r\n\r\nexport const PostDescription = styled.p`\r\n  color: #000;\r\n  font-size: 1rem;\r\n  margin-top: 0.3rem;\r\n`\r\n\r\nexport const PostDate = styled.time`\r\n  color: #000;\r\n  font-size: 0.8rem;\r\n`\r\n","import React, { useMemo } from 'react'\r\n\r\nimport * as S from './styled'\r\n\r\nconst PostFeed = ({ list }) => {\r\n  const sortedPosts = useMemo(() => (\r\n    list.map(({ node: { frontmatter: { date, description, title }, timeToRead, fields: { slug } }}) => (\r\n      <S.PostLinkWrapper\r\n        href={slug}\r\n        title={title}\r\n        rel='noopener noreferer'\r\n      >\r\n        <S.PostItem>\r\n          <S.PostTitle>{title}</S.PostTitle>\r\n          <S.PostDate>{`${date} â€¢ ${timeToRead} min read`}</S.PostDate>\r\n          <S.PostDescription>{description}</S.PostDescription>\r\n        </S.PostItem>\r\n      </S.PostLinkWrapper>\r\n    ))\r\n  ), [list])\r\n\r\n  return (\r\n    <S.PostFeedWrapper>\r\n      {sortedPosts}\r\n    </S.PostFeedWrapper>\r\n  )\r\n}\r\n\r\nexport default PostFeed\r\n","import React from 'react';\r\nimport { useStaticQuery, graphql } from 'gatsby'\r\n\r\nimport Layout from '../components/Layout';\r\nimport SEO from '../components/seo';\r\nimport PostFeed from '../components/PostFeed';\r\n\r\nconst IndexPage = () => {\r\n  const { allMarkdownRemark } = useStaticQuery(graphql`\r\n    query PostList {\r\n      allMarkdownRemark(sort: {fields: frontmatter___date, order: DESC}) {\r\n        edges {\r\n          node {\r\n            frontmatter {\r\n              date(formatString: \"DD-MM-YYYY\")\r\n              description\r\n              title\r\n            }\r\n            timeToRead\r\n            fields {\r\n              slug\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  const rawPostList = allMarkdownRemark.edges\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO title='Home' />\r\n      <PostFeed list={rawPostList} />\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default IndexPage;\r\n","import styled from 'styled-components';\r\n\r\nexport const LayoutWrapper = styled.section`\r\n  display: flex;\r\n  flex-direction: column;\r\n  font-family: 'Merriweather','Georgia',serif;\r\n  margin: 0 auto;\r\n  max-width: 42rem;\r\n  padding: 2.5rem 1.25rem;\r\n  width: 100%;\r\n`;\r\n\r\nexport const LayoutMain = styled.main`\r\n  min-height: 100vh;\r\n  width: 100%;\r\n`;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport GlobalStyles from '../../styles/global'\r\nimport Profile from '../Profile';\r\nimport Header from '../Header';\r\n\r\nimport * as S from './styled';\r\n\r\nconst Layout = ({ children }) => {\r\n  return (\r\n    <S.LayoutWrapper>\r\n      <GlobalStyles />\r\n      <Header />\r\n      <Profile />\r\n      <S.LayoutMain>{children}</S.LayoutMain>\r\n    </S.LayoutWrapper>\r\n  )\r\n};\r\n\r\nLayout.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Layout;\r\n","/**\r\n * SEO component that queries for data with\r\n *  Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.com/docs/use-static-query/\r\n */\r\n\r\nimport React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Helmet } from \"react-helmet\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nfunction SEO({ description, lang, meta, title }) {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            author\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n  const defaultTitle = site.siteMetadata?.title\r\n\r\n  return (\r\n    <Helmet\r\n      htmlAttributes={{\r\n        lang,\r\n      }}\r\n      title={title}\r\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\r\n      meta={[\r\n        {\r\n          name: `description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          property: `og:description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:type`,\r\n          content: `website`,\r\n        },\r\n        {\r\n          name: `twitter:card`,\r\n          content: `summary`,\r\n        },\r\n        {\r\n          name: `twitter:creator`,\r\n          content: site.siteMetadata?.author || ``,\r\n        },\r\n        {\r\n          name: `twitter:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          name: `twitter:description`,\r\n          content: metaDescription,\r\n        },\r\n      ].concat(meta)}\r\n    />\r\n  )\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  description: ``,\r\n}\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.arrayOf(PropTypes.object),\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default SEO\r\n"],"sourceRoot":""}